{"version":3,"sources":["components/SearchMovie/index.jsx","components/MenuTop/index.jsx","components/Footer/index.jsx","components/Movie/index.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchMovie","props","className","type","name","placeholder","defaulProps","onSubmit","Example","useState","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","Footer","id","class","target","Movie","movies","Container","Row","md","sm","xs","map","movie","Col","Card","key","poster_path","CardImg","top","width","src","alt","CardBody","Button","color","defaultProps","App","setMovies","useEffect","axios","get","then","response","data","results","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oYAYA,SAASA,EAAYC,GACjB,OACI,0BAAMC,UAAU,gBACZ,2BACIC,KAAK,SACLC,KAAK,QACLC,YAAY,qBAV5BL,EAAYM,YAAa,CACrBC,SAAU,MAeCP,QCKAQ,EAnBC,SAACP,GAAW,IAAD,EACGQ,oBAAS,GADZ,6BAKzB,OACE,yBAAKP,UAAU,YACb,kBAACQ,EAAA,EAAD,CAAQC,OAAK,EAACC,OAAO,MACnB,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,QAA2B,yCACzB,kBAACC,EAAA,EAAD,CAAKb,UAAU,UAAUc,QAAM,GAC7B,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,W,MCODC,MApBf,SAAgBjB,GACZ,OACI,6BAASkB,GAAG,UACR,yBAAKC,MAAM,aACP,yBAAKA,MAAM,kBACP,wBAAIA,MAAM,mBACN,wBAAIA,MAAM,OAAM,uBAAGN,KAAK,2CAA2CO,OAAO,UAA1D,aAChB,wBAAID,MAAM,OAAM,uBAAGN,KAAK,8CAA8CO,OAAO,UAA7D,cAChB,wBAAID,MAAM,OAAM,uBAAGN,KAAK,sCAAsCO,OAAO,UAArD,aAGxB,yBAAKD,MAAM,gBACX,yBAAKA,MAAM,eACP,sG,iFCLpB,SAASE,EAAMrB,GAAQ,IACZsB,EAAUtB,EAAVsB,OACP,OACI,kBAACC,EAAA,EAAD,CAAWtB,UAAU,SACjB,kBAACuB,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAEdL,EAAOM,KAAI,SAAAC,GAAK,OACZ,kBAACC,EAAA,EAAD,CAAK7B,UAAU,aACX,kBAAC8B,EAAA,EAAD,CAAMC,IAAKH,EAAMX,IACU,MAArBW,EAAMI,YACF,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAK,0EAA2EC,IAAI,mBAC9G,kBAACJ,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAG,wCAAmCR,EAAMI,aAAeK,IAAI,mBAC/F,kBAACC,EAAA,EAAD,KAEA,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAd,wBAlBhCpB,EAAMqB,aAAe,CACjBpB,OAAQ,IA4BGD,QChBAsB,MAlBf,WAAgB,IAAD,EACenC,mBAAS,IADxB,mBACNc,EADM,KACEsB,EADF,KASb,OAPAC,qBAAU,WAERC,IAAMC,IADM,gFAEPC,MAAK,SAAAC,GAAQ,OAAIL,EAAUK,EAASC,KAAKC,YAC1CC,QAAQC,IAAI,QAAS/B,KACxB,IAGD,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOqB,OAAQA,IACf,kBAAC,EAAD,QCRcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.2bae49e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../SearchMovie/SearchMovie.scss';\n\nSearchMovie.propTypes = {\n    onSubmit: PropTypes.func,\n};\n\nSearchMovie.defaulProps ={\n    onSubmit: null,\n};\n\nfunction SearchMovie(props) {\n    return (\n        <form className=\"search-movie\">\n            <input \n                type=\"search\" \n                name=\"movie\"\n                placeholder=\"Search movie...\"\n            />\n        </form>\n    );\n}\n\nexport default SearchMovie;","import React, { useState } from 'react';\nimport '../MenuTop/MenuTop.scss';\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from 'reactstrap';\nimport SearchMovie from '../SearchMovie';\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div className=\"menu-top\">\n      <Navbar light expand=\"md\">\n        <NavbarBrand href=\"/\">Movie<span>Finder</span></NavbarBrand>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n                <SearchMovie/>\n            </NavItem>\n          </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Example;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../Footer/Footer.scss';\n\nFooter.propTypes = {\n    \n};\n\nfunction Footer(props) {\n    return (\n        <section id=\"footer\">\n            <div class=\"container\">\n                <div class=\"footer-content\">\n                    <ul class=\"social-networks\">\n                        <li class=\"li1\"><a href=\"https://www.facebook.com/ngoc.hoang.9843\" target=\"_blank\">Facebook</a></li>\n                        <li class=\"li2\"><a href=\"https://www.instagram.com/waynehoang/?hl=vi\" target=\"_blank\">Instagram</a></li>\n                        <li class=\"li3\"><a href=\"https://github.com/hoangtrandaingoc\" target=\"_blank\">Github</a></li>\n                    </ul>\n                </div>\n                <div class=\"clear-float\"></div>\n                <div class=\"coppyrights\">\n                    <p>Â© Copyright 2020   |   Design by Wayne   |   All Rights Reserved</p>\n                </div>  \n            </div>\n        </section>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../Movie/Movie.scss';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button, Container, Col, Collapse, Row\n  } from 'reactstrap';\n\nMovie.propTypes = {\n    movies: PropTypes.array,\n};\n\nMovie.defaultProps = {\n    movies: [],\n}\n\nfunction Movie(props) {\n    const {movies} = props;\n    return (\n        <Container className=\"movie\">\n            <Row md=\"4\" sm=\"3\" xs=\"2\">\n                {\n                    movies.map(movie => (\n                        <Col className=\"col-movie\">\n                            <Card key={movie.id}>\n                                { movie.poster_path == null\n                                    ? <CardImg top width=\"100%\" src={\"https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg\"} alt=\"Card image cap\" /> \n                                    : <CardImg top width=\"100%\" src={`http://image.tmdb.org/t/p/w500${movie.poster_path}`} alt=\"Card image cap\" />}\n                                <CardBody>\n                                {/* <CardTitle>{movie.original_title}</CardTitle> */}\n                                <Button color=\"success\">View Details</Button>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))\n                }\n            </Row>\n        </Container>\n    );\n}\n\nexport default Movie;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport MenuTop from './components/MenuTop';\nimport Footer from './components/Footer';\nimport axios from 'axios'\nimport Movie from './components/Movie';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const url = \"https://api.themoviedb.org/4/list/1?api_key=5dd50dcd383eb11b1fa40f4e563891b1\"\n    axios.get(url)\n        .then(response => setMovies(response.data.results))\n        console.log(\"data:\", movies);\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <MenuTop/>\n      <Movie movies={movies}/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}