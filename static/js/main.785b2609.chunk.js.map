{"version":3,"sources":["contexts/SearchContext.js","assets/images/play-btn.svg","components/SearchMovie/index.jsx","components/MenuTop/index.jsx","components/Footer/index.jsx","components/MovieInfor/index.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchContext","React","createContext","SearchProvider","props","useState","movieInfor","setMovieInfor","searchMovie","setSearchMovie","valueSearch","setValueSearch","page","totalPages","paginationSearch","setPagination","filters","setFilters","url","fetchAPI","a","axios","get","res","data","results","total_pages","Provider","value","handleSearchMovie","e","target","handleSubmit","event","keyCode","handeChangePageSearch","newPage","console","log","children","module","exports","SearchMovie","useContext","className","type","name","placeholder","onChange","onKeyUp","MenuTop","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","Footer","id","class","MovieInfor","isOpen","setIsOpen","keyMovie","setKeyMovie","urlId","map","openModal","useEffect","then","response","key","Container","movie","Row","Col","md","xs","src","poster_path","alt","original_title","vote_average","release_date","overview","channel","videoId","onClose","onClick","style","width","IconPlay","Home","lazy","App","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.785b2609.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const SearchContext = React.createContext();\n\nexport function SearchProvider(props){\n    const [movieInfor, setMovieInfor] = useState([]);\n\n    const [searchMovie, setSearchMovie] = useState([]);\n    const [valueSearch, setValueSearch] = useState(\"\");\n\n    const [paginationSearch, setPagination] = useState({\n        page: 1,\n        totalPages:1\n      })\n      const [filters, setFilters] = useState({\n        page: 1,\n        totalPages:1\n      })\n\n    function handleSearchMovie(e){\n        let value = e.target.value;\n        setValueSearch(value);\n    }\n    \n    const apiKey = \"5dd50dcd383eb11b1fa40f4e563891b1\";\n    const url = `https://api.themoviedb.org/4/search/movie?api_key=${apiKey}&query=${valueSearch}&page=${filters.page}`;\n\n    // function fetchAPI(){\n    //     axios.get(url)\n    //         .then(response => {\n    //         const res = response.data;\n    //         setSearchMovie(res.results);\n    //         setPagination({\n    //             page: res.page,\n    //             totalPages: res.total_pages\n    //         })\n    //     })\n    // }\n\n    async function fetchAPI(){\n        let res = await axios.get(url);\n        setSearchMovie(res.data.results);\n        setPagination({\n            page: res.data.page,\n            totalPages: res.data.total_pages\n        })\n    }\n\n\n    function handleSubmit(event){\n        if (event.keyCode === 13){\n            fetchAPI();\n        }\n    }\n\n\n   function handeChangePageSearch(newPage){\n        // setPagination(paginationSearch);\n        setFilters({\n            ...filters,\n                page:newPage\n        })\n        fetchAPI();\n        console.log(\"set page\", paginationSearch);\n\n   }\n\n return (\n    <SearchContext.Provider \n        value={{searchMovie, \n                handleSearchMovie, \n                handleSubmit, \n                paginationSearch, \n                handeChangePageSearch, \n                movieInfor,\n                setMovieInfor\n        }}>\n        {props.children}\n    </SearchContext.Provider>\n );\n}","module.exports = __webpack_public_path__ + \"static/media/play-btn.8f2a68c1.svg\";","import React, { useState, useRef, useContext } from 'react';\nimport '../SearchMovie/SearchMovie.scss';\nimport { SearchContext } from '../../contexts/SearchContext';\n\n\n\nfunction SearchMovie() {\n    const {handleSearchMovie, handleSubmit} = useContext(SearchContext);\n\n    return (\n        <div className=\"search-movie\">\n            <input \n                type=\"search\" \n                name=\"movie\"\n                placeholder=\"Search movie...\"\n                onChange={handleSearchMovie}\n                onKeyUp={handleSubmit}\n            />\n        </div>\n    );\n}\n\nexport default SearchMovie;","import React, { useState } from 'react';\nimport '../MenuTop/MenuTop.scss';\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from 'reactstrap';\nimport SearchMovie from '../SearchMovie';\n\nconst MenuTop = () => {\n\n  return (\n    <div className=\"menu-top\">\n      <Navbar light expand=\"md\">\n        <NavbarBrand href=\"/movie-finder\">Movie<span>Finder</span></NavbarBrand>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n                <SearchMovie/>\n            </NavItem>\n          </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default MenuTop;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../Footer/Footer.scss';\n\nFooter.propTypes = {\n    \n};\n\nfunction Footer(props) {\n    return (\n        <section id=\"footer\">\n            <div class=\"container\">\n                <div class=\"footer-content\">\n                    <ul class=\"social-networks\">\n                        <li class=\"li1\"><a href=\"https://www.facebook.com/ngoc.hoang.9843\" target=\"_blank\">Facebook</a></li>\n                        <li class=\"li2\"><a href=\"https://www.instagram.com/waynehoang/?hl=vi\" target=\"_blank\">Instagram</a></li>\n                        <li class=\"li3\"><a href=\"https://github.com/hoangtrandaingoc\" target=\"_blank\">Github</a></li>\n                    </ul>\n                </div>\n                <div class=\"clear-float\"></div>\n                <div class=\"coppyrights\">\n                    <p>Â© Copyright 2020   |   Design by Wayne   |   All Rights Reserved</p>\n                </div>  \n            </div>\n        </section>\n    );\n}\n\nexport default Footer;","import React, { useState, useContext, useEffect } from 'react';\nimport { SearchContext } from '../../contexts/SearchContext';\nimport { Container, Row, Col } from 'reactstrap';\nimport '../../../node_modules/react-modal-video/scss/modal-video.scss';\nimport ModalVideo from 'react-modal-video';\nimport '../MovieInfor/MovieInfor.scss';\nimport IconPlay from '../../assets/images/play-btn.svg';\nimport axios from 'axios';\n\n\n\nfunction MovieInfor(props) {\n    const {movieInfor} = useContext(SearchContext);\n    const [isOpen, setIsOpen] = useState(false);\n\n\n    const [keyMovie, setKeyMovie] = useState('');\n    const apiKey = \"5dd50dcd383eb11b1fa40f4e563891b1\";\n    const urlId = `https://api.themoviedb.org/3/movie/${movieInfor.map(id=>id.id)}/videos?api_key=${apiKey}`;\n    useEffect(() => {\n        axios.get(urlId)\n            .then(response => {\n                const res = response.data;\n                setKeyMovie(res.results[0].key)\n            })\n    }, []);\n\n    function openModal(){\n        setIsOpen(true);\n    }\n    \n    return (\n        <Container>\n            {\n                movieInfor.map(movie => (\n                    <Row className=\"movie-infor\" key={movie.id}>\n                        <Col md=\"4\" xs=\"12\">\n                            <img \n                                className=\"img-thumbnail\"\n                                src={`http://image.tmdb.org/t/p/w500${movie.poster_path}`} \n                                alt=\n                                \"Card image cap\"\n                            />\n                        </Col>\n                        <Col md=\"8\" xs=\"12\">\n                            <h1>{movie.original_title}</h1>\n                            <p><span>Vote: </span> {movie.vote_average}/10</p>\n                            <p><span>Release: </span> {movie.release_date}</p>\n                            <h4>Overview</h4>\n                            <p>{movie.overview}</p>\n                            <div>\n                                    <ModalVideo channel='youtube' isOpen={isOpen} videoId={keyMovie} onClose={()=>setIsOpen(false)} />\n                                    <p className=\"btn-play\" onClick={openModal}><img style={{width:50}} src={IconPlay} alt=\"\"/> Play Trailer</p>\n                            </div>\n                        </Col>\n                    </Row>\n                ))\n            }\n        </Container>\n    );\n}\n\nexport default MovieInfor;","import React, { Suspense } from 'react';\nimport './App.scss';\nimport MenuTop from './components/MenuTop';\nimport Footer from './components/Footer';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport MovieInfor from './components/MovieInfor';\n// import Home from './pages/Home';\n\nconst Home = React.lazy(() => import('./pages/Home'))\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div>Loading ...</div>}>\n      <Router>\n          <MenuTop/>\n          <Switch>\n          <Route path=\"/movie-finder\" exact component={Home}></Route>\n          <Route path=\"/movie-infor\" component={MovieInfor}></Route>\n          </Switch>\n          <Footer/>\n      </Router>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { SearchProvider } from './contexts/SearchContext';\n\nReactDOM.render(\n  \n    <React.StrictMode>\n      <SearchProvider>\n      <App />\n      </SearchProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}